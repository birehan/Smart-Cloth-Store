{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { getFirestore, collection, getDocs, addDoc, updateDoc, deleteDoc, doc, getDoc } from 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyDFKanYXun65DroF3mKms8lwSbfLoX6szc\",\n  authDomain: \"birehan-eco-db.firebaseapp.com\",\n  projectId: \"birehan-eco-db\",\n  storageBucket: \"birehan-eco-db.appspot.com\",\n  messagingSenderId: \"185955401855\",\n  appId: \"1:185955401855:web:0933f69cb26f46219aff4a\",\n  measurementId: \"G-WN8GVTX54F\"\n};\nconst app = initializeApp(config);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider(); // init services\n\nexport const db = getFirestore(app); // provider.setCustomParameters({prompt: 'select_account'}); \n\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider).then(result => {\n    const name = result.user.displayName;\n    const email = result.user.email;\n    console.log(result);\n  }).catch(error => console.log(error));\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userRef);\n\n  if (userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({});\n      const docRef = await addDoc(collection(db, \"users\"), {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      console.log(\"document ID: \" + docRef.id);\n    } catch (error) {\n      console.log(\"error: \", reportError);\n    }\n  } // const colRef = collection(db, 'users');\n  // const snapShot = await getDocs(colRef);\n  // const querySnapshot = await getDocs(collection(db, \"users\"));\n  // let userExist = false;\n  // querySnapshot.forEach((doc) =>{\n  //     if (doc.id == userAuth.uid) userExist = true\n  //     })\n  // if (! userExist){\n  //     const {displayName, email} = userAuth;\n  //     const createdAt = new Date();\n  //     try{\n  //         const docRef = await addDoc(collection(db, \"users\"), {\n  //             displayName,\n  //             email,\n  //             createdAt,\n  //             ...additionalData\n  //         });\n  //         console.log(\"document ID: \" + docRef.id)\n  //     }\n  //     catch(error){\n  //         console.log(\"error: \", reportError)\n  //     }\n  // }\n  // else{\n  //     console.log(\"user already exists\")\n  // }\n\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","getFirestore","collection","getDocs","addDoc","updateDoc","deleteDoc","doc","getDoc","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","provider","db","signInWithGoogle","then","result","name","user","displayName","email","console","log","catch","error","createUserProfileDocument","userAuth","additionalData","userRef","uid","userSnapshot","exists","createdAt","Date","set","docRef","id","reportError"],"sources":["/home/babi/Desktop/react/fire/src/firebase/firebase.utils.js"],"sourcesContent":["import {initializeApp} from 'firebase/app';\nimport {getAuth, GoogleAuthProvider, signInWithPopup} from \"firebase/auth\"\nimport {getFirestore, collection,  getDocs,\n    addDoc,\n    updateDoc,\n    deleteDoc,\n    doc,\n    getDoc} from 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyDFKanYXun65DroF3mKms8lwSbfLoX6szc\",\n    authDomain: \"birehan-eco-db.firebaseapp.com\",\n    projectId: \"birehan-eco-db\",\n    storageBucket: \"birehan-eco-db.appspot.com\",\n    messagingSenderId: \"185955401855\",\n    appId: \"1:185955401855:web:0933f69cb26f46219aff4a\",\n    measurementId: \"G-WN8GVTX54F\"\n  };\n\nconst app = initializeApp(config);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\n\n// init services\nexport const db = getFirestore(app);\n\n// provider.setCustomParameters({prompt: 'select_account'}); \n\nexport const signInWithGoogle = () => {\n    signInWithPopup(auth, provider).then((result) => {\n        const name = result.user.displayName;\n        const email = result.user.email;\n        console.log(result)\n    })\n    .catch(error => console.log(error))\n};\n\n\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\n    if(!userAuth) return;\n\n\n    const userRef = doc(db, \"users\", userAuth.uid);\n    const userSnapshot = await getDoc(userRef);\n\n    if (userSnapshot.exists()){\n\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await userRef.set({})\n            const docRef = await addDoc(collection(db, \"users\"), {\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n            console.log(\"document ID: \" + docRef.id)\n        }\n        catch(error){\n            console.log(\"error: \", reportError)\n        }\n        \n    }\n\n    // const colRef = collection(db, 'users');\n    // const snapShot = await getDocs(colRef);\n\n    // const querySnapshot = await getDocs(collection(db, \"users\"));\n\n    // let userExist = false;\n\n    // querySnapshot.forEach((doc) =>{\n    //     if (doc.id == userAuth.uid) userExist = true\n    //     })\n\n    // if (! userExist){\n    //     const {displayName, email} = userAuth;\n    //     const createdAt = new Date();\n\n    //     try{\n    //         const docRef = await addDoc(collection(db, \"users\"), {\n    //             displayName,\n    //             email,\n    //             createdAt,\n    //             ...additionalData\n    //         });\n    //         console.log(\"document ID: \" + docRef.id)\n    //     }\n    //     catch(error){\n    //         console.log(\"error: \", reportError)\n    //     }\n    // }\n    // else{\n    //     console.log(\"user already exists\")\n    // }\n\n    \n\n}\n\n"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,cAA5B;AACA,SAAQC,OAAR,EAAiBC,kBAAjB,EAAqCC,eAArC,QAA2D,eAA3D;AACA,SAAQC,YAAR,EAAsBC,UAAtB,EAAmCC,OAAnC,EACIC,MADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,GAJJ,EAKIC,MALJ,QAKiB,oBALjB;AAOA,MAAMC,MAAM,GAAG;EACXC,MAAM,EAAE,yCADG;EAEXC,UAAU,EAAE,gCAFD;EAGXC,SAAS,EAAE,gBAHA;EAIXC,aAAa,EAAE,4BAJJ;EAKXC,iBAAiB,EAAE,cALR;EAMXC,KAAK,EAAE,2CANI;EAOXC,aAAa,EAAE;AAPJ,CAAf;AAUA,MAAMC,GAAG,GAAGpB,aAAa,CAACY,MAAD,CAAzB;AACA,OAAO,MAAMS,IAAI,GAAGpB,OAAO,CAACmB,GAAD,CAApB;AACP,MAAME,QAAQ,GAAG,IAAIpB,kBAAJ,EAAjB,C,CAEA;;AACA,OAAO,MAAMqB,EAAE,GAAGnB,YAAY,CAACgB,GAAD,CAAvB,C,CAEP;;AAEA,OAAO,MAAMI,gBAAgB,GAAG,MAAM;EAClCrB,eAAe,CAACkB,IAAD,EAAOC,QAAP,CAAf,CAAgCG,IAAhC,CAAsCC,MAAD,IAAY;IAC7C,MAAMC,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAYC,WAAzB;IACA,MAAMC,KAAK,GAAGJ,MAAM,CAACE,IAAP,CAAYE,KAA1B;IACAC,OAAO,CAACC,GAAR,CAAYN,MAAZ;EACH,CAJD,EAKCO,KALD,CAKOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CALhB;AAMH,CAPM;AAUP,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;EACxE,IAAG,CAACD,QAAJ,EAAc;EAGd,MAAME,OAAO,GAAG5B,GAAG,CAACa,EAAD,EAAK,OAAL,EAAca,QAAQ,CAACG,GAAvB,CAAnB;EACA,MAAMC,YAAY,GAAG,MAAM7B,MAAM,CAAC2B,OAAD,CAAjC;;EAEA,IAAIE,YAAY,CAACC,MAAb,EAAJ,EAA0B;IAEtB,MAAM;MAACZ,WAAD;MAAcC;IAAd,IAAuBM,QAA7B;IACA,MAAMM,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAG;MACC,MAAML,OAAO,CAACM,GAAR,CAAY,EAAZ,CAAN;MACA,MAAMC,MAAM,GAAG,MAAMtC,MAAM,CAACF,UAAU,CAACkB,EAAD,EAAK,OAAL,CAAX,EAA0B;QACjDM,WADiD;QAEjDC,KAFiD;QAGjDY,SAHiD;QAIjD,GAAGL;MAJ8C,CAA1B,CAA3B;MAMAN,OAAO,CAACC,GAAR,CAAY,kBAAkBa,MAAM,CAACC,EAArC;IACH,CATD,CAUA,OAAMZ,KAAN,EAAY;MACRH,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBe,WAAvB;IACH;EAEJ,CA1BuE,CA4BxE;EACA;EAEA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAIH,CA9DM"},"metadata":{},"sourceType":"module"}