{"ast":null,"code":"import _regeneratorRuntime from\"/home/babi/Desktop/react/Smart-Cloth-Store/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/home/babi/Desktop/react/Smart-Cloth-Store/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/home/babi/Desktop/react/Smart-Cloth-Store/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{initializeApp}from'firebase/app';import{getAuth,GoogleAuthProvider,signInWithPopup}from\"firebase/auth\";import{getFirestore,doc,setDoc,getDoc}from'firebase/firestore';var config={apiKey:\"AIzaSyDFKanYXun65DroF3mKms8lwSbfLoX6szc\",authDomain:\"birehan-eco-db.firebaseapp.com\",projectId:\"birehan-eco-db\",storageBucket:\"birehan-eco-db.appspot.com\",messagingSenderId:\"185955401855\",appId:\"1:185955401855:web:0933f69cb26f46219aff4a\",measurementId:\"G-WN8GVTX54F\"};var app=initializeApp(config);export var auth=getAuth(app);var provider=new GoogleAuthProvider();// init services\nexport var db=getFirestore(app);// provider.setCustomParameters({prompt: 'select_account'}); \nexport var signInWithGoogle=function signInWithGoogle(){signInWithPopup(auth,provider).then(function(result){console.log(result);}).catch(function(error){return console.log(error);});};export var createUserProfileDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(userAuth,additionalData){var userRef,userSnapshot,displayName,email,createdAt;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:userRef=doc(db,\"users\",userAuth.uid);_context.next=5;return getDoc(userRef);case 5:userSnapshot=_context.sent;if(userSnapshot.exists()){_context.next=18;break;}displayName=userAuth.displayName,email=userAuth.email;createdAt=new Date();_context.prev=9;_context.next=12;return setDoc(userRef,_objectSpread({displayName:displayName,email:email,createdAt:createdAt},additionalData));case 12:console.log(\"document ID: \"+userRef.id);_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](9);console.log(\"error: \",reportError);case 18:return _context.abrupt(\"return\",userRef);case 19:case\"end\":return _context.stop();}}},_callee,null,[[9,15]]);}));return function createUserProfileDocument(_x,_x2){return _ref.apply(this,arguments);};}();// const colRef = collection(db, 'users');\n// const snapShot = await getDocs(colRef);\n// const querySnapshot = await getDocs(collection(db, \"users\"));\n// let userExist = false;\n// querySnapshot.forEach((doc) =>{\n//     if (doc.id == userAuth.uid) userExist = true\n//     })\n// if (! userExist){\n//     const {displayName, email} = userAuth;\n//     const createdAt = new Date();\n//     try{\n//         const docRef = await addDoc(collection(db, \"users\"), {\n//             displayName,\n//             email,\n//             createdAt,\n//             ...additionalData\n//         });\n//         console.log(\"document ID: \" + docRef.id)\n//     }\n//     catch(error){\n//         console.log(\"error: \", reportError)\n//     }\n// }\n// else{\n//     console.log(\"user already exists\")\n// }\n// provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n// provider.setCustomParameters({\n//     'login_hint': 'user@example.com'\n//   });\n// signInWithPopup(auth, provider)\n//   .then((result) => {\n//     // This gives you a Google Access Token. You can use it to access the Google API.\n//     const credential = GoogleAuthProvider.credentialFromResult(result);\n//     const token = credential.accessToken;\n//     // The signed-in user info.\n//     const user = result.user;\n//     // ...\n//   }).catch((error) => {\n//     // Handle Errors here.\n//     const errorCode = error.code;\n//     const errorMessage = error.message;\n//     // The email of the user's account used.\n//     const email = error.customData.email;\n//     // The AuthCredential type that was used.\n//     const credential = GoogleAuthProvider.credentialFromError(error);\n//     // ...\n//   });","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","getFirestore","doc","setDoc","getDoc","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","provider","db","signInWithGoogle","then","result","console","log","catch","error","createUserProfileDocument","userAuth","additionalData","userRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","id","reportError"],"sources":["/home/babi/Desktop/react/Smart-Cloth-Store/src/firebase/firebase.utils.js"],"sourcesContent":["import {initializeApp} from 'firebase/app';\nimport {getAuth, GoogleAuthProvider, signInWithPopup} from \"firebase/auth\"\nimport {getFirestore, \n    doc,\n    setDoc,\n    getDoc} from 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyDFKanYXun65DroF3mKms8lwSbfLoX6szc\",\n    authDomain: \"birehan-eco-db.firebaseapp.com\",\n    projectId: \"birehan-eco-db\",\n    storageBucket: \"birehan-eco-db.appspot.com\",\n    messagingSenderId: \"185955401855\",\n    appId: \"1:185955401855:web:0933f69cb26f46219aff4a\",\n    measurementId: \"G-WN8GVTX54F\"\n  };\n\nconst app = initializeApp(config);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\n\n// init services\nexport const db = getFirestore(app);\n\n// provider.setCustomParameters({prompt: 'select_account'}); \n\nexport const signInWithGoogle = () => {\n    signInWithPopup(auth, provider).then((result) => {\n        \n        console.log(result)\n    })\n    .catch(error => console.log(error))\n};\n\n\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\n    if(!userAuth) return;\n\n\n    const userRef = doc(db, \"users\", userAuth.uid);\n    const userSnapshot = await getDoc(userRef);\n\n    if (!userSnapshot.exists()){\n\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await setDoc(userRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        \n            console.log(\"document ID: \" + userRef.id)\n        }\n        catch(error){\n            console.log(\"error: \", reportError)\n        }\n        \n    }\n    return userRef;\n\n}\n\n  // const colRef = collection(db, 'users');\n    // const snapShot = await getDocs(colRef);\n\n    // const querySnapshot = await getDocs(collection(db, \"users\"));\n\n    // let userExist = false;\n\n    // querySnapshot.forEach((doc) =>{\n    //     if (doc.id == userAuth.uid) userExist = true\n    //     })\n\n    // if (! userExist){\n    //     const {displayName, email} = userAuth;\n    //     const createdAt = new Date();\n\n    //     try{\n    //         const docRef = await addDoc(collection(db, \"users\"), {\n    //             displayName,\n    //             email,\n    //             createdAt,\n    //             ...additionalData\n    //         });\n    //         console.log(\"document ID: \" + docRef.id)\n    //     }\n    //     catch(error){\n    //         console.log(\"error: \", reportError)\n    //     }\n    // }\n    // else{\n    //     console.log(\"user already exists\")\n    // }\n\n\n\n\n// provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n\n// provider.setCustomParameters({\n//     'login_hint': 'user@example.com'\n//   });\n\n// signInWithPopup(auth, provider)\n//   .then((result) => {\n//     // This gives you a Google Access Token. You can use it to access the Google API.\n//     const credential = GoogleAuthProvider.credentialFromResult(result);\n//     const token = credential.accessToken;\n//     // The signed-in user info.\n//     const user = result.user;\n//     // ...\n//   }).catch((error) => {\n//     // Handle Errors here.\n//     const errorCode = error.code;\n//     const errorMessage = error.message;\n//     // The email of the user's account used.\n//     const email = error.customData.email;\n//     // The AuthCredential type that was used.\n//     const credential = GoogleAuthProvider.credentialFromError(error);\n//     // ...\n//   });"],"mappings":"+YAAA,OAAQA,aAAR,KAA4B,cAA5B,CACA,OAAQC,OAAR,CAAiBC,kBAAjB,CAAqCC,eAArC,KAA2D,eAA3D,CACA,OAAQC,YAAR,CACIC,GADJ,CAEIC,MAFJ,CAGIC,MAHJ,KAGiB,oBAHjB,CAKA,GAAMC,OAAM,CAAG,CACXC,MAAM,CAAE,yCADG,CAEXC,UAAU,CAAE,gCAFD,CAGXC,SAAS,CAAE,gBAHA,CAIXC,aAAa,CAAE,4BAJJ,CAKXC,iBAAiB,CAAE,cALR,CAMXC,KAAK,CAAE,2CANI,CAOXC,aAAa,CAAE,cAPJ,CAAf,CAUA,GAAMC,IAAG,CAAGhB,aAAa,CAACQ,MAAD,CAAzB,CACA,MAAO,IAAMS,KAAI,CAAGhB,OAAO,CAACe,GAAD,CAApB,CACP,GAAME,SAAQ,CAAG,GAAIhB,mBAAJ,EAAjB,CAEA;AACA,MAAO,IAAMiB,GAAE,CAAGf,YAAY,CAACY,GAAD,CAAvB,CAEP;AAEA,MAAO,IAAMI,iBAAgB,CAAG,QAAnBA,iBAAmB,EAAM,CAClCjB,eAAe,CAACc,IAAD,CAAOC,QAAP,CAAf,CAAgCG,IAAhC,CAAqC,SAACC,MAAD,CAAY,CAE7CC,OAAO,CAACC,GAAR,CAAYF,MAAZ,EACH,CAHD,EAICG,KAJD,CAIO,SAAAC,KAAK,QAAIH,QAAO,CAACC,GAAR,CAAYE,KAAZ,CAAJ,EAJZ,EAKH,CANM,CASP,MAAO,IAAMC,0BAAyB,4FAAG,iBAAMC,QAAN,CAAgBC,cAAhB,4KACjCD,QADiC,iEAI/BE,OAJ+B,CAIrBzB,GAAG,CAACc,EAAD,CAAK,OAAL,CAAcS,QAAQ,CAACG,GAAvB,CAJkB,uBAKVxB,OAAM,CAACuB,OAAD,CALI,QAK/BE,YAL+B,kBAOhCA,YAAY,CAACC,MAAb,EAPgC,0BAS1BC,WAT0B,CASJN,QATI,CAS1BM,WAT0B,CASbC,KATa,CASJP,QATI,CASbO,KATa,CAU3BC,SAV2B,CAUf,GAAIC,KAAJ,EAVe,wCAavB/B,OAAM,CAACwB,OAAD,gBACRI,WAAW,CAAXA,WADQ,CAERC,KAAK,CAALA,KAFQ,CAGRC,SAAS,CAATA,SAHQ,EAILP,cAJK,EAbiB,SAoB7BN,OAAO,CAACC,GAAR,CAAY,gBAAkBM,OAAO,CAACQ,EAAtC,EApB6B,iFAuB7Bf,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBe,WAAvB,EAvB6B,wCA2B9BT,OA3B8B,uEAAH,kBAAzBH,0BAAyB,gDAA/B,CA+BL;AACE;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKJ;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}