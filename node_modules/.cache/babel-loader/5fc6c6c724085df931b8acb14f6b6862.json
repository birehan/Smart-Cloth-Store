{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc } from 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyDFKanYXun65DroF3mKms8lwSbfLoX6szc\",\n  authDomain: \"birehan-eco-db.firebaseapp.com\",\n  projectId: \"birehan-eco-db\",\n  storageBucket: \"birehan-eco-db.appspot.com\",\n  messagingSenderId: \"185955401855\",\n  appId: \"1:185955401855:web:0933f69cb26f46219aff4a\",\n  measurementId: \"G-WN8GVTX54F\"\n};\nconst app = initializeApp(config);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider(); // init services\n\nexport const db = getFirestore(app); // provider.setCustomParameters({prompt: 'select_account'}); \n\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider).then(result => {\n    console.log(result);\n  }).catch(error => console.log(error));\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      console.log(\"document ID: \" + userRef.id);\n    } catch (error) {\n      console.log(\"error: \", reportError);\n    }\n  }\n\n  return userRef;\n} // const colRef = collection(db, 'users');\n// const snapShot = await getDocs(colRef);\n// const querySnapshot = await getDocs(collection(db, \"users\"));\n// let userExist = false;\n// querySnapshot.forEach((doc) =>{\n//     if (doc.id == userAuth.uid) userExist = true\n//     })\n// if (! userExist){\n//     const {displayName, email} = userAuth;\n//     const createdAt = new Date();\n//     try{\n//         const docRef = await addDoc(collection(db, \"users\"), {\n//             displayName,\n//             email,\n//             createdAt,\n//             ...additionalData\n//         });\n//         console.log(\"document ID: \" + docRef.id)\n//     }\n//     catch(error){\n//         console.log(\"error: \", reportError)\n//     }\n// }\n// else{\n//     console.log(\"user already exists\")\n// }\n; // provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n// provider.setCustomParameters({\n//     'login_hint': 'user@example.com'\n//   });\n// signInWithPopup(auth, provider)\n//   .then((result) => {\n//     // This gives you a Google Access Token. You can use it to access the Google API.\n//     const credential = GoogleAuthProvider.credentialFromResult(result);\n//     const token = credential.accessToken;\n//     // The signed-in user info.\n//     const user = result.user;\n//     // ...\n//   }).catch((error) => {\n//     // Handle Errors here.\n//     const errorCode = error.code;\n//     const errorMessage = error.message;\n//     // The email of the user's account used.\n//     const email = error.customData.email;\n//     // The AuthCredential type that was used.\n//     const credential = GoogleAuthProvider.credentialFromError(error);\n//     // ...\n//   });","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","getFirestore","doc","setDoc","getDoc","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","provider","db","signInWithGoogle","then","result","console","log","catch","error","createUserProfileDocument","userAuth","additionalData","userRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","id","reportError"],"sources":["/home/babi/Desktop/react/Smart-Cloth-Store/src/firebase/firebase.utils.js"],"sourcesContent":["import {initializeApp} from 'firebase/app';\nimport {getAuth, GoogleAuthProvider, signInWithPopup} from \"firebase/auth\"\nimport {getFirestore, \n    doc,\n    setDoc,\n    getDoc} from 'firebase/firestore';\n\nconst config = {\n    apiKey: \"AIzaSyDFKanYXun65DroF3mKms8lwSbfLoX6szc\",\n    authDomain: \"birehan-eco-db.firebaseapp.com\",\n    projectId: \"birehan-eco-db\",\n    storageBucket: \"birehan-eco-db.appspot.com\",\n    messagingSenderId: \"185955401855\",\n    appId: \"1:185955401855:web:0933f69cb26f46219aff4a\",\n    measurementId: \"G-WN8GVTX54F\"\n  };\n\nconst app = initializeApp(config);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\n\n// init services\nexport const db = getFirestore(app);\n\n// provider.setCustomParameters({prompt: 'select_account'}); \n\nexport const signInWithGoogle = () => {\n    signInWithPopup(auth, provider).then((result) => {\n        \n        console.log(result)\n    })\n    .catch(error => console.log(error))\n};\n\n\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\n    if(!userAuth) return;\n\n\n    const userRef = doc(db, \"users\", userAuth.uid);\n    const userSnapshot = await getDoc(userRef);\n\n    if (!userSnapshot.exists()){\n\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await setDoc(userRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        \n            console.log(\"document ID: \" + userRef.id)\n        }\n        catch(error){\n            console.log(\"error: \", reportError)\n        }\n        \n    }\n    return userRef;\n\n}\n\n  // const colRef = collection(db, 'users');\n    // const snapShot = await getDocs(colRef);\n\n    // const querySnapshot = await getDocs(collection(db, \"users\"));\n\n    // let userExist = false;\n\n    // querySnapshot.forEach((doc) =>{\n    //     if (doc.id == userAuth.uid) userExist = true\n    //     })\n\n    // if (! userExist){\n    //     const {displayName, email} = userAuth;\n    //     const createdAt = new Date();\n\n    //     try{\n    //         const docRef = await addDoc(collection(db, \"users\"), {\n    //             displayName,\n    //             email,\n    //             createdAt,\n    //             ...additionalData\n    //         });\n    //         console.log(\"document ID: \" + docRef.id)\n    //     }\n    //     catch(error){\n    //         console.log(\"error: \", reportError)\n    //     }\n    // }\n    // else{\n    //     console.log(\"user already exists\")\n    // }\n\n;\n\n\n// provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n\n// provider.setCustomParameters({\n//     'login_hint': 'user@example.com'\n//   });\n\n// signInWithPopup(auth, provider)\n//   .then((result) => {\n//     // This gives you a Google Access Token. You can use it to access the Google API.\n//     const credential = GoogleAuthProvider.credentialFromResult(result);\n//     const token = credential.accessToken;\n//     // The signed-in user info.\n//     const user = result.user;\n//     // ...\n//   }).catch((error) => {\n//     // Handle Errors here.\n//     const errorCode = error.code;\n//     const errorMessage = error.message;\n//     // The email of the user's account used.\n//     const email = error.customData.email;\n//     // The AuthCredential type that was used.\n//     const credential = GoogleAuthProvider.credentialFromError(error);\n//     // ...\n//   });"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,cAA5B;AACA,SAAQC,OAAR,EAAiBC,kBAAjB,EAAqCC,eAArC,QAA2D,eAA3D;AACA,SAAQC,YAAR,EACIC,GADJ,EAEIC,MAFJ,EAGIC,MAHJ,QAGiB,oBAHjB;AAKA,MAAMC,MAAM,GAAG;EACXC,MAAM,EAAE,yCADG;EAEXC,UAAU,EAAE,gCAFD;EAGXC,SAAS,EAAE,gBAHA;EAIXC,aAAa,EAAE,4BAJJ;EAKXC,iBAAiB,EAAE,cALR;EAMXC,KAAK,EAAE,2CANI;EAOXC,aAAa,EAAE;AAPJ,CAAf;AAUA,MAAMC,GAAG,GAAGhB,aAAa,CAACQ,MAAD,CAAzB;AACA,OAAO,MAAMS,IAAI,GAAGhB,OAAO,CAACe,GAAD,CAApB;AACP,MAAME,QAAQ,GAAG,IAAIhB,kBAAJ,EAAjB,C,CAEA;;AACA,OAAO,MAAMiB,EAAE,GAAGf,YAAY,CAACY,GAAD,CAAvB,C,CAEP;;AAEA,OAAO,MAAMI,gBAAgB,GAAG,MAAM;EAClCjB,eAAe,CAACc,IAAD,EAAOC,QAAP,CAAf,CAAgCG,IAAhC,CAAsCC,MAAD,IAAY;IAE7CC,OAAO,CAACC,GAAR,CAAYF,MAAZ;EACH,CAHD,EAICG,KAJD,CAIOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAJhB;AAKH,CANM;AASP,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;EACxE,IAAG,CAACD,QAAJ,EAAc;EAGd,MAAME,OAAO,GAAGzB,GAAG,CAACc,EAAD,EAAK,OAAL,EAAcS,QAAQ,CAACG,GAAvB,CAAnB;EACA,MAAMC,YAAY,GAAG,MAAMzB,MAAM,CAACuB,OAAD,CAAjC;;EAEA,IAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA2B;IAEvB,MAAM;MAACC,WAAD;MAAcC;IAAd,IAAuBP,QAA7B;IACA,MAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAG;MACC,MAAM/B,MAAM,CAACwB,OAAD,EAAU;QAClBI,WADkB;QAElBC,KAFkB;QAGlBC,SAHkB;QAIlB,GAAGP;MAJe,CAAV,CAAZ;MAOAN,OAAO,CAACC,GAAR,CAAY,kBAAkBM,OAAO,CAACQ,EAAtC;IACH,CATD,CAUA,OAAMZ,KAAN,EAAY;MACRH,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBe,WAAvB;IACH;EAEJ;;EACD,OAAOT,OAAP;AAEH,CA7BM,CA+BL;AACE;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DG,C,CAkEP;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}